import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/@swup/plugin/lib/index.js
var require_lib = __commonJS({
  "node_modules/@swup/plugin/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Plugin = function() {
      function Plugin2() {
        _classCallCheck(this, Plugin2);
        this.isSwupPlugin = true;
      }
      _createClass(Plugin2, [{
        key: "mount",
        value: function mount() {
        }
      }, {
        key: "unmount",
        value: function unmount() {
        }
      }, {
        key: "_beforeMount",
        value: function _beforeMount() {
        }
      }, {
        key: "_afterUnmount",
        value: function _afterUnmount() {
        }
        // here for any future hidden auto-cleanup
        // this is here so we can tell if plugin was created by extending this class
      }]);
      return Plugin2;
    }();
    exports.default = Plugin;
  }
});

// node_modules/@swup/head-plugin/lib/mergeHeadContents.js
var require_mergeHeadContents = __commonJS({
  "node_modules/@swup/head-plugin/lib/mergeHeadContents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = mergeHeadContents;
    function mergeHeadContents(currentHead, newHead) {
      var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$shouldPersist = _ref.shouldPersist, shouldPersist = _ref$shouldPersist === void 0 ? function() {
        return false;
      } : _ref$shouldPersist;
      var themeActive = Boolean(document.querySelector("[data-swup-theme]"));
      var currentTags = Array.from(currentHead.children);
      var newChildren = Array.from(newHead.children);
      var addTags = getTagsToAdd(currentTags, newChildren, { themeActive });
      var removeTags = getTagsToRemove(currentTags, newChildren);
      removeTags.reverse().filter(function(_ref2) {
        var el = _ref2.el;
        return shouldManageTag(el);
      }).filter(function(_ref3) {
        var el = _ref3.el;
        return !shouldPersist(el);
      }).forEach(function(_ref4) {
        var el = _ref4.el;
        return currentHead.removeChild(el);
      });
      addTags.filter(function(_ref5) {
        var el = _ref5.el;
        return shouldManageTag(el);
      }).forEach(function(_ref6) {
        var el = _ref6.el, index = _ref6.index;
        currentHead.insertBefore(el, currentHead.children[index + 1] || null);
      });
      return {
        removed: removeTags.map(function(_ref7) {
          var el = _ref7.el;
          return el;
        }),
        added: addTags.map(function(_ref8) {
          var el = _ref8.el;
          return el;
        })
      };
    }
    function getTagsToRemove(currentEls, newEls) {
      return currentEls.reduce(function(tags, el) {
        var isAmongNew = newEls.some(function(newEl) {
          return compareTags(el, newEl);
        });
        var isThemeTag = el.matches("[data-swup-theme]");
        if (!isAmongNew && !isThemeTag) {
          tags.push({ el });
        }
        return tags;
      }, []);
    }
    function getTagsToAdd(currentEls, newEls, _ref9) {
      var themeActive = _ref9.themeActive;
      return newEls.reduce(function(tags, el, i) {
        var isAmongCurrent = currentEls.some(function(currentEl) {
          return compareTags(el, currentEl);
        });
        if (!isAmongCurrent) {
          var index = themeActive ? i + 1 : i;
          tags.push({ el, index });
        }
        return tags;
      }, []);
    }
    function shouldManageTag(el) {
      return el.localName !== "title";
    }
    function compareTags(oldTag, newTag) {
      return oldTag.outerHTML === newTag.outerHTML;
    }
  }
});

// node_modules/@swup/head-plugin/lib/updateLangAttribute.js
var require_updateLangAttribute = __commonJS({
  "node_modules/@swup/head-plugin/lib/updateLangAttribute.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = updateLangAttribute;
    function updateLangAttribute(currentHtml, newHtml) {
      if (currentHtml.lang !== newHtml.lang) {
        currentHtml.lang = newHtml.lang;
        return currentHtml.lang;
      } else {
        return null;
      }
    }
  }
});

// node_modules/@swup/head-plugin/lib/waitForStylesheet.js
var require_waitForStylesheet = __commonJS({
  "node_modules/@swup/head-plugin/lib/waitForStylesheet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = waitForStylesheet;
    function waitForStylesheet(element) {
      var timeoutMs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var isLoaded = function isLoaded2(_ref) {
        var href = _ref.href;
        return Array.from(document.styleSheets).map(function(_ref2) {
          var href2 = _ref2.href;
          return href2;
        }).includes(href);
      };
      var whenLoaded = function whenLoaded2(cb) {
        if (isLoaded(element)) {
          cb();
        } else {
          setTimeout(function() {
            return whenLoaded2(cb);
          }, 10);
        }
      };
      return new Promise(function(resolve) {
        whenLoaded(resolve);
        if (timeoutMs > 0) {
          setTimeout(resolve, timeoutMs);
        }
      });
    }
  }
});

// node_modules/@swup/head-plugin/lib/waitForAssets.js
var require_waitForAssets = __commonJS({
  "node_modules/@swup/head-plugin/lib/waitForAssets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = waitForAssets;
    var _waitForStylesheet = require_waitForStylesheet();
    var _waitForStylesheet2 = _interopRequireDefault(_waitForStylesheet);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function waitForAssets(elements) {
      var timeoutMs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return elements.filter(function(el) {
        return el.matches("link[rel=stylesheet][href]");
      }).map(function(el) {
        return (0, _waitForStylesheet2.default)(el, timeoutMs);
      });
    }
  }
});

// node_modules/@swup/head-plugin/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@swup/head-plugin/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _plugin = require_lib();
    var _plugin2 = _interopRequireDefault(_plugin);
    var _mergeHeadContents2 = require_mergeHeadContents();
    var _mergeHeadContents3 = _interopRequireDefault(_mergeHeadContents2);
    var _updateLangAttribute = require_updateLangAttribute();
    var _updateLangAttribute2 = _interopRequireDefault(_updateLangAttribute);
    var _waitForAssets = require_waitForAssets();
    var _waitForAssets2 = _interopRequireDefault(_waitForAssets);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var HeadPlugin = function(_Plugin) {
      _inherits(HeadPlugin2, _Plugin);
      function HeadPlugin2() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, HeadPlugin2);
        var _this = _possibleConstructorReturn(this, (HeadPlugin2.__proto__ || Object.getPrototypeOf(HeadPlugin2)).call(this));
        _this.name = "HeadPlugin";
        _this.assetLoadPromises = [];
        _this.updateHead = function() {
          var newPageHtml = _this.swup.cache.getCurrentPage().originalContent;
          var newDocument = new DOMParser().parseFromString(newPageHtml, "text/html");
          var _mergeHeadContents = (0, _mergeHeadContents3.default)(document.head, newDocument.head, { shouldPersist: _this.isPersistentTag }), removed = _mergeHeadContents.removed, added = _mergeHeadContents.added;
          var lang = (0, _updateLangAttribute2.default)(document.documentElement, newDocument.documentElement);
          _this.swup.log("Removed " + removed.length + " / added " + added.length + " tags in head");
          if (lang) {
            _this.swup.log("Updated lang attribute: " + lang);
          }
          if (_this.options.awaitAssets) {
            _this.assetLoadPromises = (0, _waitForAssets2.default)(added, _this.options.timeout);
          } else {
            _this.assetLoadPromises = [];
          }
          newDocument.documentElement.innerHTML = "";
          newDocument = null;
        };
        _this.isPersistentTag = function(el) {
          var persistTags = _this.options.persistTags;
          if (typeof persistTags === "function") {
            return persistTags(el);
          }
          if (typeof persistTags === "string") {
            return el.matches(persistTags);
          }
          return Boolean(persistTags);
        };
        _this.options = _extends({
          persistTags: false,
          persistAssets: false,
          awaitAssets: false,
          timeout: 3e3
        }, options);
        return _this;
      }
      _createClass(HeadPlugin2, [{
        key: "mount",
        value: function mount() {
          this.validateOptions();
          this.swup.on("willReplaceContent", this.updateHead);
          if (this.options.awaitAssets) {
            this.originalSwupReplaceContent = this.swup.replaceContent.bind(this.swup);
            this.swup.replaceContent = this.replaceContentAfterAssetsLoaded.bind(this);
          }
        }
      }, {
        key: "unmount",
        value: function unmount() {
          this.swup.off("willReplaceContent", this.updateHead);
          if (this.originalSwupReplaceContent) {
            this.swup.replaceContent = this.originalSwupReplaceContent;
            this.originalSwupReplaceContent = null;
          }
        }
      }, {
        key: "validateOptions",
        value: function validateOptions() {
          if (this.options.persistAssets && !this.options.persistTags) {
            this.options.persistTags = "link[rel=stylesheet], script[src], style";
          }
          if (this.options.awaitAssets && !this.swup.replaceContent) {
            this.options.awaitAssets = false;
            console.error("[Swup Head Plugin] Installed version of swup doesn't support awaitAssets option");
          }
        }
      }, {
        key: "replaceContentAfterAssetsLoaded",
        value: function replaceContentAfterAssetsLoaded() {
          var _this2 = this;
          for (var _len = arguments.length, originalArgs = Array(_len), _key = 0; _key < _len; _key++) {
            originalArgs[_key] = arguments[_key];
          }
          if (this.assetLoadPromises.length) {
            this.swup.log("Waiting for " + this.assetLoadPromises.length + " assets to load");
            return new Promise(function(resolve) {
              Promise.all(_this2.assetLoadPromises).then(function() {
                _this2.assetLoadPromises = [];
                _this2.originalSwupReplaceContent.apply(_this2, originalArgs).then(resolve);
              });
            });
          } else {
            return this.originalSwupReplaceContent.apply(this, originalArgs);
          }
        }
      }]);
      return HeadPlugin2;
    }(_plugin2.default);
    exports.default = HeadPlugin;
  }
});
export default require_lib2();
//# sourceMappingURL=@swup_head-plugin.js.map
